{
  "id": "address-geocoder",
  "content": "# address-geocoder\n\nSDU contract for address geocoding.\n\n## Synopsis\n\nThe `address-geocoder` contract allows the mapping of an address given in canonical form to a pair of geo coordinates.\nMultiple coordinate projections are supported, and the localization accuracy in meters is given.\n\n## Definitions\n\nThe keywords *MUST*, *MUST NOT*, *REQUIRED*, *SHALL*, *SHALL NOT*, *SHOULD*, *SHOULD NOT*, *RECOMMENDED*,  *MAY*, and\n*OPTIONAL* in this document are to be interpreted as described in [RFC 2119](https://tools.ietf.org/html/rfc2119).\n\n*geocoding* within this document refers to the process of assigning location (two-dimensional, i.e. at earth's surface)\nto an address given in canonical readable text form.\n\n*floating-point number* refers to the text representation of a number with an arbitrary precision.\nIt MUST be a valid number literal according to the [JSON specification](https://tools.ietf.org/html/std90).\n\n*integer* referes to the text representation of an integer number, i.e. without decimal places.\nIt MUST be a valid number literal according to the [JSON specification](https://tools.ietf.org/html/std90) and\n*MUST NOT* have a decimal separator or exponential indicator\n\n## Inputs\n\n### `address`\n\nIn group: `main`\n\nThis input receives the address to be geocoded. It *MUST* be given in canonical form.\n*Canonical* refers to the most specified representation of the address in the way it would normally be written for a\ngiven country or region.\n\n## Outputs\n\n### `x`\n\nIn group: `main`\n\nThis output receives the first coordinate of the output pair.\nA conforming implementation *MUST* always output a valid *floating-point number*.\n\n### `y`\n\nIn group: `main`\n\nThis output receives the second coordinate of the output pair.\nA conforming implementation *MUST* always output a valid *floating-point number*.\n\n### `localizationAccuracy`\n\nIn group: `main`\n\nThis output receives the estimated accuracy of the localization result in meters.\nA conforming implementation *MUST* always output a valid *integer*.\nThe output value *MUST* be `-1` or non-negative.\n\n## Functionality\n\n### Configuration\n\nA JSON object *MAY* be given as the configuration field when instantiating the contract.\nThe configuration object *MAY* contain a `projection` attribute with a string value that refers to a coordinate\nprojection to be used for the x/y outputs.\n\nA conforming implementation *MUST* support `EPSG:4326` (latitude and longitude on the WGS84 geoid) and `EPSG:3857`\n(Google Maps' metric pseudo mercator).\n`EPSG:3857` *MUST* be assumed as the requested projection, if none is supplied.\nAn implementation *MAY* support additional projections and should document so accordingly.\n\n### Preconditions\n\n`address` is non-empty and given in canonical form.\n\n### Process\n\nThe value given in `address` is used to determine a pair of surface coordinates in an implementation-defined manner.\nIf a coordinate pair was successfully obtained, it *MUST* transformed to the requested output projection.\n`x` and `y` *MUST* be set to the transformed output coordinate pair's first and second coordinate respectively.\n`localizationAccuracy` *MUST* be set to a positive value to indicate the quality of the geolocation.\nThe value *SHOULD* refer to the radius of a circular vacinity around the location, within which the actual physical\naddress is to be found with reasonable confidence.\n\nIf the geolocation failed, `localizationAccuracy` *MUST* be set to `-1` to indicate failure.\n`x` and `y` *SHOULD* be set to `0` or a value generally distinguishable from valid data.\n",
  "inputs": {
    "address": {
      "group": "main"
    }
  },
  "outputs": {
    "x": {
      "group": "main"
    },
    "y": {
      "group": "main"
    },
    "localizationAccuracy": {
      "group": "main"
    }
  }
}
