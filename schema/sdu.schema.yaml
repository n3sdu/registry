$id: "http://n3sdu.github.io/r/schema/sdu.schema.json"
type: object
allOf:
  - properties:
      input:
        type: object
        additionalProperties: false
        patternProperties:
          # Regular entries must not start with _ and be a valid fieldSet
          '^[^_].*$': { $ref: '#/definitions/fieldSet' }
          # Vendor-extensions
          '^_vnd_\w+_.*$': true
      functional:
        type: object
        additionalProperties: false
        patternProperties:
          # Regular entries must start with _ and be a valid contractInstance
          '^_(?!vnd_).*$': { $ref: '#/definitions/contractInstance' }
          # Vendor-extensions
          '^_vnd_\w+_.*$': true
      validation: { $ref: '#/definitions/predicateOrNull' }
      plausibility: { $ref: '#/definitions/predicateOrNull' }
  - $ref: '#/definitions/vendorProps'
additionalProperties: false
definitions:
  # Helpers for vendor-specific definitions
  vendorProps: { $ref: "common.schema.json#/definitions/vendorProps" }
  # Used for inputs, outputs
  fieldSet:
    type: array
    uniqueItems: true
    minItems: 1
    items:
      type: string
      pattern: ".+" # len at least 1
  # Used for referencing fields within the SDU
  fieldRef:
    type: object
    # name of the field set can be omitted if field is unambiguous
    required: [ field ]
    additionalProperties: false
    allOf:
      - properties:
          field:
            type: string
          set: # field set name
            type: string
      - $ref: '#/definitions/vendorProps'
  # describes an instantiated contract to generate output
  functionalInstance: # contract instance
    type: object
    required: [ contract, output, binding ]
    additionalProperties: false
    allOf:
      - properties:
          contract: { type: string }
          instance: { type: string }
          output: { $ref: '#/definitions/fieldSet' }
          binding:
            type: object
            additionalProperties: { $ref: '#/definitions/fieldRef' }
          priority: { type: number }
          config: true # allow arbitrary content
      - $ref: '#/definitions/vendorProps'
  # ==== predicates
  # text pattern predicates
  patternPredicate:
    type: object
    additionalProperties: false
    oneOf:
      - properties:
          # PCRE pattern
          pattern: { type: string } # valid PCRE
          target: { $ref: '#/definitions/fieldRef' }
        required: [ pattern, target ]
      # convenience helpers
      - properties: # notEmpty: treated as .+
          notEmpty: { $ref: '#/definitions/fieldRef' }
        required: [ notEmpty ]
      - properties: # notBlank: treated as \P{Z}+
          notBlank: { $ref: '#/definitions/fieldRef' }
        required: [ notBlank ]
      - properties: # word: treated as \w+
          word: { $ref: '#/definitions/fieldRef' }
        required: [ word ]
      - properties: # integer: treated as [+-]?\d+
          integer: { $ref: '#/definitions/fieldRef' }
        required: [ integer ]
  # number predicate
  numberPredicate:
    type: object
    additionalProperties: false
    required: [ value, target, relation ]
    properties:
      value: { type: number }
      target: { $ref: '#/definitions/fieldRef' }
      relation:
        enum: [ equal, notEqual, less, lessEqual, greater, greaterEqual ]
  # contract predicate
  contractPredicate:
    type: object
    additionalProperties: false
    properties:
      contract: { type: string }
  # predicate negation
  notPredicate:
    type: object
    additionalProperties: false
    properties:
      not: { $ref: '#/definitions/predicate' }
  # combinations all/any
  allPredicate:
    type: object
    additionalProperties: false
    properties:
      all:
        type: array
        minItems: 1
        items: { $ref: '#/definitions/predicate' }
  anyPredicate:
    type: object
    additionalProperties: false
    properties:
      any:
        type: array
        minItems: 1
        items: { $ref: '#/definitions/predicate' }
  # full predicate object
  predicate:
    type: object
    allOf: # helper to allow for vendor props
      - oneOf: # allow all predicate types
        - $ref: '#/definitions/patternPredicate'
        - $ref: '#/definitions/numberPredicate'
        - $ref: '#/definitions/notPredicate'
        - $ref: '#/definitions/allPredicate'
        - $ref: '#/definitions/anyPredicate'
        - $ref: '#/definitions/vendorProps'
      - $ref: '#/definitions/vendorProps'
  # helper for optional use
  predicateOrNull:
    oneOf:
      - $ref: '#/definitions/predicate'
      - type: 'null'
