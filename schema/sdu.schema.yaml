$id: "http://n3sdu.github.io/r/schema/sdu.schema.json"
type: object
properties:
  input:
    type: object
    patternProperties:
      # Regular entries must not start with _ and be a valid fieldSet
      '^[^_].*$': { $ref: '#/definitions/fieldSet' }
    propertyNames:
      anyOf:
        - $ref: 'common.schema.json#/definitions/vendorProps'
        - pattern: '^[^_].*$'
  functional:
    type: object
    patternProperties:
      # Regular entries must start with _ and be a valid functionalInstance
      '^_(?!vnd_).*$': { $ref: '#/definitions/functionalInstance' }
    propertyNames:
      anyOf:
        - $ref: 'common.schema.json#/definitions/vendorProps'
        - pattern: '^_(?!vnd_).*$'
  validation: { $ref: '#/definitions/predicateOrNull' }
  plausibility: { $ref: '#/definitions/predicateOrNull' }
propertyNames:
  anyOf:
    - $ref: 'common.schema.json#/definitions/vendorProps'
    - enum: [ input, functional, validation, plausibility ]
definitions:
  # Used for inputs, outputs
  fieldSet:
    type: array
    uniqueItems: true
    minItems: 1
    items:
      type: string
      pattern: ".+" # len at least 1
  # Used for referencing fields within the SDU
  fieldRef:
    $ref: 'common.schema.json#/definitions/fieldRef'
  # describes an instantiated contract to generate output
  functionalInstance: # contract instance
    type: object
    properties:
      contract: { type: string }
      instance: { type: string }
      output: { $ref: '#/definitions/fieldSet' }
      extends: { type: string }
      binding:
        type: object
        additionalProperties: { $ref: '#/definitions/fieldRef' }
      priority: { type: number }
      config: true # allow arbitrary content
    required: [ contract, output, binding ]
    propertyNames:
      anyOf:
        - enum: [ contract, instance, output, extends,
                  binding, priority, config ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # ==== predicates
  # text pattern predicates
  patternPredicate:
    type: object
    oneOf:
      - properties: # default: PCRE pattern
          pattern: { type: string } # valid PCRE
          target: { $ref: '#/definitions/fieldRef' }
        required: [ pattern, target ]
      # convenience helpers
      - properties: # notEmpty: treated as .+
          notEmpty: { $ref: '#/definitions/fieldRef' }
        required: [ notEmpty ]
      - properties: # notBlank: treated as \P{Z}+
          notBlank: { $ref: '#/definitions/fieldRef' }
        required: [ notBlank ]
      - properties: # word: treated as \w+
          word: { $ref: '#/definitions/fieldRef' }
        required: [ word ]
      - properties: # integer: treated as [+-]?\d+
          integer: { $ref: '#/definitions/fieldRef' }
        required: [ integer ]
    propertyNames:
      anyOf:
        - enum: [ pattern, target, notEmpty, notBlank, word, integer ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # number predicate
  numberPredicate:
    type: object
    properties:
      value: { type: number }
      target: { $ref: '#/definitions/fieldRef' }
      relation:
        enum: [ equal, notEqual, less, lessEqual, greater, greaterEqual ]
    required: [ value, target, relation ]
    propertyNames:
      anyOf:
        - enum: [ value, target, relation ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # contract predicate
  contractPredicate:
    type: object
    additionalProperties: false
    properties: # instance format differs due to altered requirements
      contract: { type: string } # no instance sharing occurs
      config: true
      expected: { type: string } # expected value; 'valid' if not given
      matchOutput: { type: string } # output's name; group must match input
      matchBinding: # inputs (same fieldset); group must match output
        type: object
        additionalProperties: { $ref: '#/definitions/fieldRef' }
      setupBindings: # applied before matching; MAY CONSUME INVALID DATA
        type: array # executed in order to set-up state
        items:
          type: object
          additionalProperties: { $ref: '#/definitions/fieldRef' }
    required: [ contract, matchOutput, matchBinding ]
    propertyNames:
      anyOf:
        - enum: [ contract, matchOutput, matchBinding,
                  expected, setupBindings ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # predicate negation
  notPredicate:
    type: object
    properties:
      not: { $ref: '#/definitions/predicate' }
    required: [ not ]
    propertyNames:
      anyOf:
        - enum: [ not ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # combinations all/any
  allPredicate:
    type: object
    properties:
      all:
        type: array
        minItems: 1
        items: { $ref: '#/definitions/predicate' }
    required: [ all ]
    propertyNames:
      anyOf:
        - enum: [ all ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  anyPredicate:
    type: object
    properties:
      any:
        type: array
        minItems: 1
        items: { $ref: '#/definitions/predicate' }
    required: [ any ]
    propertyNames:
      anyOf:
        - enum: [ any ]
        - $ref: 'common.schema.json#/definitions/vendorProps'
  # full predicate object
  predicate:
    type: object
    oneOf: # allow all predicate types
      - $ref: '#/definitions/patternPredicate'
      - $ref: '#/definitions/numberPredicate'
      - $ref: '#/definitions/contractPredicate'
      - $ref: '#/definitions/notPredicate'
      - $ref: '#/definitions/allPredicate'
      - $ref: '#/definitions/anyPredicate'
  # helper for optional use
  predicateOrNull:
    oneOf:
      - $ref: '#/definitions/predicate'
      - type: 'null'
